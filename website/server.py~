#!/usr/bin/python

import cherrypy, os, sys, argparse

import psycopg2, psycopg2.pool

from models.acl import ACL

sys.path.append(os.path.join(os.path.dirname(__file__), '../../metadata/utils'))
from templates import Templates
from dbs import DBS

class MainIndexRedirect:
    @cherrypy.expose
    def index(self):
        raise cherrypy.HTTPRedirect("/human/main")

class FactorBookWebSite(object):
    # from http://stackoverflow.com/a/15015705

    def __init__(self, args):
        self.args = args
        self.devMode = self.args.dev
        self.port = self.args.port
        self.useUserAccounts = False

        cacheDir = os.path.realpath(os.path.join(os.path.dirname(__file__),
                                                 "cache"))

        cherrypy.config.update({
                'server.socket_host': '0.0.0.0',
                'server.socket_port': self.port,
                'tools.sessions.on': True,
                'tools.sessions.storage_type': "file",
                'tools.sessions.storage_path': cacheDir,
                'tools.sessions.locking': 'early',
                })

        cherrypy.tree.mount(MainIndexRedirect(), '/', config = {'/': {}})

        if self.useUserAccounts:
            self.activateUserAccouts()
        else:
            self.activateNoAccounts()

        # import after adding "protect" tool
        from app_main import MainAppRunner
        from app_tf import TfAppRunner
        from app_histone import HistoneAppRunner
        from app_dnase import DNaseAppRunner
        from app_eCLIP import eCLIPAppRunner
        if not self.args.no_rna: from app_rna import RnaAppRunner
        from controllers.index import MainIndexController
        from controllers.auth import AuthApp

        self.DBCONNs = {}
        for species in ["human", "mouse"]:
            dbs = DBS.localFactorbook(species)
            DBCONN = psycopg2.pool.ThreadedConnectionPool(1, 32, **dbs)
            self.DBCONNs[species] = DBCONN
            MainAppRunner(DBCONN, self.devMode, species)
            TfAppRunner(DBCONN, self.devMode, species)
            HistoneAppRunner(DBCONN, self.devMode, species)
            DNaseAppRunner(DBCONN, self.devMode, species)
            if species != "mouse": eCLIPAppRunner(DBCONN, self.devMode, species)
            if not args.no_rna: RnaAppRunner(DBCONN, self.devMode, species)

    def start(self):
        if self.devMode:
            cherrypy.config.update({'server.environment': "development", })
        else:
            cherrypy.config.update({'server.socket_queue_size': 512,
                                    'server.thread_pool': 30
                                    })

        cherrypy.engine.start()
        cherrypy.engine.block()

    def stop(self):
        cherrypy.engine.stop()

    def activateUserAccouts(self):
        cherrypy.tools.protect = cherrypy.Tool('before_handler', ACL.protect)
        audience = "beta.factorbook.org"
        if self.devMode:
            audience = "127.0.0.1:8000"
        if self.args.audience:
            audience = self.args.audience
        print("audience is:", audience)

        cherrypy.tree.mount(AuthApp(audience),
                            '/auth', config =  {'/': {}})

    def activateNoAccounts(self):
        cherrypy.tools.protect = cherrypy.Tool('before_handler', ACL.noUsers)

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--dev', action="store_true", default=False)
    parser.add_argument('--audience', default="")
    parser.add_argument('--port', default=8000, type=int)
    parser.add_argument('--no_rna', action="store_true", default=False)
    return parser.parse_args()

def main():
    args = parse_args()
    FactorBookWebSite(args).start()

if __name__ == "__main__":
    sys.exit(main())
