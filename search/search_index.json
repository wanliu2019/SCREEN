{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SCREEN GraphQL API The GraphQL API is the main way to programatically access SCREEN data and metadata. GraphQL If you're unfamiliar with GraphQL, there are a myriad of resources. The GraphQL site offers a detailed explanation of GraphQL and how it works. However, for a (relatively) simple, one-page introduction, this page is a good introduction. Getting started The host url for the API is https://screen-api.wenglab.org/graphql . Playground Navigating to the host url directly in the browser gives an interactive playground: The playground gives autocompleted suggestions for queries, documentation (on the right), tabs for multiple queries, a button to copy the current query as a cURL call, and a button to share the current queries. The documentation tab in the playground is very powerful. You can find information on any type or field. You can browse the required arguments for queries that need them. Programmatic Access In addition, the API can be accessed programatically. Many libraries exists for several languages in order to interface with GraphQL APIs. In this guide, we'll briefly cover only three common, simple cases: Command-line with cURL Python with requests Javascript with grapqhl-request What is this guide? This guide is intended to be a quick introduction to some of the various types of data available in the SCREEN API. There will be several example queries, as well as a quick exercise at the end of each section for interactivity. These may require you to search through the documentation using the playground. To begin, see the queries overview . Composabiliy The API is designed in a fashion that data is composable. For example, you can query for nearby genes for a cCRE, and in the same request, also get the gene(s) expression and intersecting SNPs. However, in some cases, we may return an error if the respose would be too large or too performance-intenstive. In this case, you can split your query into parts.","title":"Home"},{"location":"#screen-graphql-api","text":"The GraphQL API is the main way to programatically access SCREEN data and metadata.","title":"SCREEN GraphQL API"},{"location":"#graphql","text":"If you're unfamiliar with GraphQL, there are a myriad of resources. The GraphQL site offers a detailed explanation of GraphQL and how it works. However, for a (relatively) simple, one-page introduction, this page is a good introduction.","title":"GraphQL"},{"location":"#getting-started","text":"The host url for the API is https://screen-api.wenglab.org/graphql .","title":"Getting started"},{"location":"#playground","text":"Navigating to the host url directly in the browser gives an interactive playground: The playground gives autocompleted suggestions for queries, documentation (on the right), tabs for multiple queries, a button to copy the current query as a cURL call, and a button to share the current queries. The documentation tab in the playground is very powerful. You can find information on any type or field. You can browse the required arguments for queries that need them.","title":"Playground"},{"location":"#programmatic-access","text":"In addition, the API can be accessed programatically. Many libraries exists for several languages in order to interface with GraphQL APIs. In this guide, we'll briefly cover only three common, simple cases: Command-line with cURL Python with requests Javascript with grapqhl-request","title":"Programmatic Access"},{"location":"#what-is-this-guide","text":"This guide is intended to be a quick introduction to some of the various types of data available in the SCREEN API. There will be several example queries, as well as a quick exercise at the end of each section for interactivity. These may require you to search through the documentation using the playground. To begin, see the queries overview .","title":"What is this guide?"},{"location":"#composabiliy","text":"The API is designed in a fashion that data is composable. For example, you can query for nearby genes for a cCRE, and in the same request, also get the gene(s) expression and intersecting SNPs. However, in some cases, we may return an error if the respose would be too large or too performance-intenstive. In this case, you can split your query into parts.","title":"Composabiliy"},{"location":"getting_started/command_line/","text":"The SCREEN API takes a query as JSON in the body of a POST request and returns a JSON response. As mentioned before, the interactive playground allows copying the cURL command for a given query. However, here, we'll give a simple cURL command for reference. The following command curl 'https://screen-api.wenglab.org/graphql'\\ -H 'Content-Type: application/json'\\ -H 'Accept: application/json'\\ --data-binary '{\"query\":\"{ globals { byAssembly(assembly: GRCh38) { tfs } } }\"}' returns {\"data\":{\"globals\":{\"byAssembly\":{\"tfs\":[\"AFF1\",\"AGO1\",...,\"ZZZ3\"]}}}} This response can be saved to as a JSON file. Additionally, it could be piped into a JSON processing library (like jq ) to be processed.","title":"Command-line"},{"location":"getting_started/javascript/","text":"Building on the previous two examples, this example in Javascript uses the graphql-request library to completely abstract over the underlying POST request. import { request } from 'graphql-request' const query = `query($gene: String!) { geneExpresssion(assembly: GRCh38, gene: $gene) { gene_info { approved_symbol ensemblid_ver } items { tissue cellType expID ageTitle reps { replicate logTPM } } } }` const variables = { gene: \"PTMA\" } request('https://screen-api.wenglab.org/graphql', query).then(data => console.log(data) ) which prints { \"data\": { \"geneExpresssion\": { \"gene_info\": { \"gene\": \"TIGAR\", \"ensemblid_ver\": \"ENSG00000078237.6\" }, \"items\": [ ... { \"tissue\": \"blood\", \"cellType\": \"K562\", \"expID\": \"ENCSR000AEM\", \"ageTitle\": \"\", \"reps\": [ { \"replicate\": \"1\", \"rawTPM\": 1.326569 }, { \"replicate\": \"2\", \"rawTPM\": 1.553627 }, { \"replicate\": \"mean\", \"rawTPM\": 1.440098 } ] }, ... ] } } }","title":"Javascript"},{"location":"getting_started/python/","text":"Similar to the command-like query, this example will also uses a plain POST request. However, in addition, this example uses the requests library in python to provide a thin abstraction. It also shows how to include GraphQL variables. import requests variables = { \"accession\": \"EH38E1966636\" } query = \"\"\" query($accession: String!) { ccre(accession: $accession) { accession range { chrom start end } } } \"\"\" request = requests.post( 'https://screen-api.wenglab.org/graphql', json={ 'query': query, 'variables': variables }, headers={} ) if request.status_code != 200: raise Exception(\"Query failed. Status code: {}.\".format(request.status_code)) result = request.json() print(result) where the result is { u'data': { u'ccre': { u'range': { u'start': 240535, u'end': 240809, u'chrom': u'chr2' }, u'accession': u'EH38E1966636' } } }","title":"Python"},{"location":"queries/ccredetails/","text":"Getting cCRE details Query a single cCRE Returns a single cCRE by accession. query { ccre(accession: \"EH38E2000616\") { accession } } Get biosample-specific epigenetic signals Returns all biosample-specific signals for a given cCRE. query { ccre(accession: \"EH38E2000616\") { accession details { biosampleSpecificSignals { ct { name } dnase h3k4me3 h3k27ac ctcf } } } } Get nearby genomic features Returns nearby genomic features for a single cCRE. query { ccre(accession: \"EH38E2000616\") { accession details { nearbyGenomic { nearby_genes { distance gene { approved_symbol } } tads { approved_symbol } re_tads { distance cCRE { accession } } nearby_res { distance cCRE { accession } } nearby_snps { distance snp { id } } } } } } Get orthologous cCREs in another assembly Returns orthogolous cCREs in both hg19 and mm10 for a given GRCh38 cCRE. query { ccre(accession: \"EH38E1516972\") { accession details { # Can rename fields by doing `<name>: field...` mm10: ortholog(assembly: \"mm10\") { accession range { chrom start end } } hg19: ortholog(assembly: \"hg19\") { accession range { chrom start end } } } } } Get overlapping TFs Get overlapping TF and histone peaks for a given cCRE. query { ccre(accession: \"EH38E2000616\") { accession details { tfIntersection { tf { # The name of the TF name # The number of peaks that overlap this cCRE n # The total number of peaks for the TF that *could* overlap this cCRE total } histone { name n total } } } } } Get linked genes Returns linked genes for a cCRE. query { ccre(accession: \"EH38E1516972\") { accession details { linkedGenes { gene celltype method dccaccession } } } } Try it out What query would you use to get the max H3K27ac Z-score for nearby cCREs for EH38E1516972 ? See answer query { ccre(accession: \"EH38E1516972\") { accession details { nearbyGenomic { nearby_res { cCRE { k27acmax } } } } } }","title":"cCRE details"},{"location":"queries/ccredetails/#getting-ccre-details","text":"","title":"Getting cCRE details"},{"location":"queries/ccredetails/#query-a-single-ccre","text":"Returns a single cCRE by accession. query { ccre(accession: \"EH38E2000616\") { accession } }","title":"Query a single cCRE"},{"location":"queries/ccredetails/#get-biosample-specific-epigenetic-signals","text":"Returns all biosample-specific signals for a given cCRE. query { ccre(accession: \"EH38E2000616\") { accession details { biosampleSpecificSignals { ct { name } dnase h3k4me3 h3k27ac ctcf } } } }","title":"Get biosample-specific epigenetic signals"},{"location":"queries/ccredetails/#get-nearby-genomic-features","text":"Returns nearby genomic features for a single cCRE. query { ccre(accession: \"EH38E2000616\") { accession details { nearbyGenomic { nearby_genes { distance gene { approved_symbol } } tads { approved_symbol } re_tads { distance cCRE { accession } } nearby_res { distance cCRE { accession } } nearby_snps { distance snp { id } } } } } }","title":"Get nearby genomic features"},{"location":"queries/ccredetails/#get-orthologous-ccres-in-another-assembly","text":"Returns orthogolous cCREs in both hg19 and mm10 for a given GRCh38 cCRE. query { ccre(accession: \"EH38E1516972\") { accession details { # Can rename fields by doing `<name>: field...` mm10: ortholog(assembly: \"mm10\") { accession range { chrom start end } } hg19: ortholog(assembly: \"hg19\") { accession range { chrom start end } } } } }","title":"Get orthologous cCREs in another assembly"},{"location":"queries/ccredetails/#get-overlapping-tfs","text":"Get overlapping TF and histone peaks for a given cCRE. query { ccre(accession: \"EH38E2000616\") { accession details { tfIntersection { tf { # The name of the TF name # The number of peaks that overlap this cCRE n # The total number of peaks for the TF that *could* overlap this cCRE total } histone { name n total } } } } }","title":"Get overlapping TFs"},{"location":"queries/ccredetails/#get-linked-genes","text":"Returns linked genes for a cCRE. query { ccre(accession: \"EH38E1516972\") { accession details { linkedGenes { gene celltype method dccaccession } } } }","title":"Get linked genes"},{"location":"queries/ccredetails/#try-it-out","text":"What query would you use to get the max H3K27ac Z-score for nearby cCREs for EH38E1516972 ? See answer query { ccre(accession: \"EH38E1516972\") { accession details { nearbyGenomic { nearby_res { cCRE { k27acmax } } } } } }","title":"Try it out"},{"location":"queries/ccres/","text":"Searching cCREs Query cCREs by location Returns the cCREs in the given range, their location, and their zscores in K562. query { ccres( assembly: GRCh38 range: { chrom: \"chr2\", start: 115500000, end: 116000000 } ) { total ccres { accession range { chrom start end } ctspecific(ct: \"K562\") { dnase_zscore h3k4me3_zscore h3k27ac_zscore ctcf_zscore } } } } Query cCREs by max epigenetic signal Searches for cCREs on chromosome 2, with max H3K4me3 zscore between 2 and 3. query { ccres( assembly: GRCh38 range: { chrom: \"chr2\" } expmaxs: { rank_promoter_start: 2, rank_promoter_end: 3 } ) { total ccres { accession k4me3max } } } Query cCREs by biosample-specific epigenetic signal Returns cCREs on chromosome 2 active in K562 (dnase zscore >= 1.64). query { ccres( assembly: GRCh38 range: { chrom: \"chr2\" } ctexps: { cellType: \"K562\", rank_dnase_start: 1.64 } ) { total ccres { accession k4me3max } } } Query cCREs by accession Returns back two cCREs by accession. query { ccres(assembly: GRCh38, accessions: [\"EH38E2000616\", \"EH38E1972623\"]) { ccres { accession } } } Try it out What query would you use to find the nearby protein-coding genes of enhancer-like GRCh38 cCREs in GM12878 on chromosome 16? See answer query { ccres( assembly: GRCh38 range: { chrom: \"chr16\" } ctexps: { cellType: \"GM12878\", rank_dnase_start: 1.64, rank_enhancer_start: 1.64 } ) { total ccres { accession nearbygenes { pc { distance gene { approved_symbol } } } } } }","title":"Searching cCREs"},{"location":"queries/ccres/#searching-ccres","text":"","title":"Searching cCREs"},{"location":"queries/ccres/#query-ccres-by-location","text":"Returns the cCREs in the given range, their location, and their zscores in K562. query { ccres( assembly: GRCh38 range: { chrom: \"chr2\", start: 115500000, end: 116000000 } ) { total ccres { accession range { chrom start end } ctspecific(ct: \"K562\") { dnase_zscore h3k4me3_zscore h3k27ac_zscore ctcf_zscore } } } }","title":"Query cCREs by location"},{"location":"queries/ccres/#query-ccres-by-max-epigenetic-signal","text":"Searches for cCREs on chromosome 2, with max H3K4me3 zscore between 2 and 3. query { ccres( assembly: GRCh38 range: { chrom: \"chr2\" } expmaxs: { rank_promoter_start: 2, rank_promoter_end: 3 } ) { total ccres { accession k4me3max } } }","title":"Query cCREs by max epigenetic signal"},{"location":"queries/ccres/#query-ccres-by-biosample-specific-epigenetic-signal","text":"Returns cCREs on chromosome 2 active in K562 (dnase zscore >= 1.64). query { ccres( assembly: GRCh38 range: { chrom: \"chr2\" } ctexps: { cellType: \"K562\", rank_dnase_start: 1.64 } ) { total ccres { accession k4me3max } } }","title":"Query cCREs by biosample-specific epigenetic signal"},{"location":"queries/ccres/#query-ccres-by-accession","text":"Returns back two cCREs by accession. query { ccres(assembly: GRCh38, accessions: [\"EH38E2000616\", \"EH38E1972623\"]) { ccres { accession } } }","title":"Query cCREs by accession"},{"location":"queries/ccres/#try-it-out","text":"What query would you use to find the nearby protein-coding genes of enhancer-like GRCh38 cCREs in GM12878 on chromosome 16? See answer query { ccres( assembly: GRCh38 range: { chrom: \"chr16\" } ctexps: { cellType: \"GM12878\", rank_dnase_start: 1.64, rank_enhancer_start: 1.64 } ) { total ccres { accession nearbygenes { pc { distance gene { approved_symbol } } } } } }","title":"Try it out"},{"location":"queries/differential_gene_expression/","text":"Querying differential gene expression data Get differential expression data Returns differental gene expression data for Ptma between C57BL/6_limb_embryo_11.5_days and C57BL/6_limb_embryo_15.5_days . query { differentialExpression( assembly: mm10 gene: \"Ptma\" ct1: \"C57BL/6_limb_embryo_11.5_days\" ct2: \"C57BL/6_limb_embryo_15.5_days\" ) { gene { approved_symbol } isde fc ct1 ct2 } } or query { gene(assembly: mm10, gene: \"Ptma\") { approved_symbol differentialExpression( ct1: \"C57BL/6_limb_embryo_11.5_days\" ct2: \"C57BL/6_limb_embryo_15.5_days\" ) { isde fc ct1 ct2 } } } Try it out What query would you use to get differential gene expression data between C57BL/6_limb_embryo_11.5_days and C57BL/6_limb_embryo_15.5_days for all genes within 500 kb of the center of EM10E0493677 ? See answer query { ccre(accession: \"EM10E0493677\") { range { expandFromCenter(distance: 500000) { genes { approved_symbol differentialExpression( ct1: \"C57BL/6_limb_embryo_11.5_days\" ct2: \"C57BL/6_limb_embryo_15.5_days\" ) { isde fc ct1 ct2 } } } } } }","title":"Differential gene expression"},{"location":"queries/differential_gene_expression/#querying-differential-gene-expression-data","text":"","title":"Querying differential gene expression data"},{"location":"queries/differential_gene_expression/#get-differential-expression-data","text":"Returns differental gene expression data for Ptma between C57BL/6_limb_embryo_11.5_days and C57BL/6_limb_embryo_15.5_days . query { differentialExpression( assembly: mm10 gene: \"Ptma\" ct1: \"C57BL/6_limb_embryo_11.5_days\" ct2: \"C57BL/6_limb_embryo_15.5_days\" ) { gene { approved_symbol } isde fc ct1 ct2 } } or query { gene(assembly: mm10, gene: \"Ptma\") { approved_symbol differentialExpression( ct1: \"C57BL/6_limb_embryo_11.5_days\" ct2: \"C57BL/6_limb_embryo_15.5_days\" ) { isde fc ct1 ct2 } } }","title":"Get differential expression data"},{"location":"queries/differential_gene_expression/#try-it-out","text":"What query would you use to get differential gene expression data between C57BL/6_limb_embryo_11.5_days and C57BL/6_limb_embryo_15.5_days for all genes within 500 kb of the center of EM10E0493677 ? See answer query { ccre(accession: \"EM10E0493677\") { range { expandFromCenter(distance: 500000) { genes { approved_symbol differentialExpression( ct1: \"C57BL/6_limb_embryo_11.5_days\" ct2: \"C57BL/6_limb_embryo_15.5_days\" ) { isde fc ct1 ct2 } } } } } }","title":"Try it out"},{"location":"queries/gene_expression/","text":"Getting gene expression data Get gene expression for all biosamples for a given gene Returns gene expression data for the TIGAR gene. query { geneExpresssion(assembly: GRCh38, gene: \"TIGAR\") { gene_info { approved_symbol } items { cellType expID reps { # Bio reps replicate rawTPM } } } } or query { gene(assembly: GRCh38, gene: \"TIGAR\") { approved_symbol expression { items { tissue cellType expID ageTitle reps { replicate rawTPM } } } } } Get gene expression for a set of biosample types for a given gene Returns a subset of gene expression data for TIGAR for cell lines only. query { geneExpresssion( assembly: GRCh38 gene: \"TIGAR\" biosample_types: [\"cell line\"] ) { gene_info { approved_symbol } items { cellType expID reps { replicate rawTPM } } } } Try it out What query would you use to get the gene expression for nearby protein-coding genes for EH38E1516972 ? See answer query { ccre(accession: \"EH38E1516972\") { nearbygenes { pc { gene { approved_symbol expression { items { cellType reps { replicate rawTPM } } } } } } } }","title":"Gene expression"},{"location":"queries/gene_expression/#getting-gene-expression-data","text":"","title":"Getting gene expression data"},{"location":"queries/gene_expression/#get-gene-expression-for-all-biosamples-for-a-given-gene","text":"Returns gene expression data for the TIGAR gene. query { geneExpresssion(assembly: GRCh38, gene: \"TIGAR\") { gene_info { approved_symbol } items { cellType expID reps { # Bio reps replicate rawTPM } } } } or query { gene(assembly: GRCh38, gene: \"TIGAR\") { approved_symbol expression { items { tissue cellType expID ageTitle reps { replicate rawTPM } } } } }","title":"Get gene expression for all biosamples for a given gene"},{"location":"queries/gene_expression/#get-gene-expression-for-a-set-of-biosample-types-for-a-given-gene","text":"Returns a subset of gene expression data for TIGAR for cell lines only. query { geneExpresssion( assembly: GRCh38 gene: \"TIGAR\" biosample_types: [\"cell line\"] ) { gene_info { approved_symbol } items { cellType expID reps { replicate rawTPM } } } }","title":"Get gene expression for a set of biosample types for a given gene"},{"location":"queries/gene_expression/#try-it-out","text":"What query would you use to get the gene expression for nearby protein-coding genes for EH38E1516972 ? See answer query { ccre(accession: \"EH38E1516972\") { nearbygenes { pc { gene { approved_symbol expression { items { cellType reps { replicate rawTPM } } } } } } } }","title":"Try it out"},{"location":"queries/gwas_and_snps/","text":"Get GWAS and SNP data Get GWAS studies Returns all studies in GRCh38. query { gwas(assembly: GRCh38) { studies { name author pubmed trait } } } Get data for a single GWAS study Returns data for a specific study. query { gwas(assembly: GRCh38) { study(study: \"Li_M_28588231_1,5_anhydroglucitol_levels\") { totalLDblocks numLdBlocksOverlap numcCREsOverlap allSNPs { snp { id } r2 ldblock { leadsnp { id } } } topCellTypes { ct { name } biosample_summary expID fdr pval } ccres { cCRE { accession } geneid snps } } } } Search for a SNP by id Returns data for a specific SNP. query { snps(assembly: GRCh38, id: \"rs367896724\") { id range { chrom start end } } } Search for a SNP by location Returns SNPS in a given range. query { snps(assembly: GRCh38, range: { chrom: \"chr1\", start: 10000, end: 12000 }) { id range { chrom start end } } } Try it out What query would you use to get the ldblocks that contain the GRCh38 SNP rs10186843 , including the following: - The SNP id - The r 2 value for the SNP in the ldblock - The name of the ldblock - This name of the study that identifies the ldblock - The id of the leadsnp of the ldblock See answer query { snps(assembly: GRCh38, id: \"rs10186843\") { assembly id ldblocks { snp { id } r2 ldblock { name study { name } leadsnp { id } } } } }","title":"GWAS and SNPs"},{"location":"queries/gwas_and_snps/#get-gwas-and-snp-data","text":"","title":"Get GWAS and SNP data"},{"location":"queries/gwas_and_snps/#get-gwas-studies","text":"Returns all studies in GRCh38. query { gwas(assembly: GRCh38) { studies { name author pubmed trait } } }","title":"Get GWAS studies"},{"location":"queries/gwas_and_snps/#get-data-for-a-single-gwas-study","text":"Returns data for a specific study. query { gwas(assembly: GRCh38) { study(study: \"Li_M_28588231_1,5_anhydroglucitol_levels\") { totalLDblocks numLdBlocksOverlap numcCREsOverlap allSNPs { snp { id } r2 ldblock { leadsnp { id } } } topCellTypes { ct { name } biosample_summary expID fdr pval } ccres { cCRE { accession } geneid snps } } } }","title":"Get data for a single GWAS study"},{"location":"queries/gwas_and_snps/#search-for-a-snp-by-id","text":"Returns data for a specific SNP. query { snps(assembly: GRCh38, id: \"rs367896724\") { id range { chrom start end } } }","title":"Search for a SNP by id"},{"location":"queries/gwas_and_snps/#search-for-a-snp-by-location","text":"Returns SNPS in a given range. query { snps(assembly: GRCh38, range: { chrom: \"chr1\", start: 10000, end: 12000 }) { id range { chrom start end } } }","title":"Search for a SNP by location"},{"location":"queries/gwas_and_snps/#try-it-out","text":"What query would you use to get the ldblocks that contain the GRCh38 SNP rs10186843 , including the following: - The SNP id - The r 2 value for the SNP in the ldblock - The name of the ldblock - This name of the study that identifies the ldblock - The id of the leadsnp of the ldblock See answer query { snps(assembly: GRCh38, id: \"rs10186843\") { assembly id ldblocks { snp { id } r2 ldblock { name study { name } leadsnp { id } } } } }","title":"Try it out"},{"location":"queries/metadata/","text":"Query metadata Input data Returns the data used in SCREEN. query { globals { inputData } } Cell compartments and biosample info Returns cell compartments, biosamples, and assays used for K562. query { globals { byAssembly(assembly: GRCh38) { cellCompartments biosamples { name assays { assay expid } } biosample(biosample: \"K562\") { assays { assay expid } } } } } Gene expression-related metadata Returns biosamples and biosample types with associated gene expression data available. query { globals { byAssembly(assembly: GRCh38) { geBiosamples geBiosampleTypes } } }","title":"Metadata"},{"location":"queries/metadata/#query-metadata","text":"","title":"Query metadata"},{"location":"queries/metadata/#input-data","text":"Returns the data used in SCREEN. query { globals { inputData } }","title":"Input data"},{"location":"queries/metadata/#cell-compartments-and-biosample-info","text":"Returns cell compartments, biosamples, and assays used for K562. query { globals { byAssembly(assembly: GRCh38) { cellCompartments biosamples { name assays { assay expid } } biosample(biosample: \"K562\") { assays { assay expid } } } } }","title":"Cell compartments and biosample info"},{"location":"queries/metadata/#gene-expression-related-metadata","text":"Returns biosamples and biosample types with associated gene expression data available. query { globals { byAssembly(assembly: GRCh38) { geBiosamples geBiosampleTypes } } }","title":"Gene expression-related metadata"},{"location":"queries/overview/","text":"The SCREEN API facilitates access to a number of different data and types of data. Here, we'll briefly describe the data available, but go into more depth, with examples, for each in separate pages. Remember: a complete list of types, fields, and documentation is available in the GraphQL playground. Retrieving metadata In many queries, specific names for biosamples, cell compartments, transcription factors, etc. are required/optional for input. So, it's important to be able to get a list of these. The globals field allows querying metadata. Searching for cCREs In order to search for ccREs, you can use the ccres field. cCREs can be searched by a set of accession, a range, or by their epigenetic signals. This is useful to find basic information about a lot of cCREs, such as their location, their biosample-agnostic epigenetic signals, or their epigenetic signals in a single or few cell types. However, due to performance limitations, it is not a good choice to get detailed information (such as epigenetics signals in every cell type). For this reason, this data is unavailable when querying more than 5 cCREs at a time. If you do want this data for individual cCREs, see the next section. Getting details for a single cCRE To get detailed information on a single cCRE, such as their epigenetic signals in all cell types, or their intersection with transcription factors, you can use the ccre field. Querying gene expression data The SCREEN API has imported all ENCODE RNA-seq data. With the geneExpression field, you can query the expression of a single gene across all biosamples. Querying differential gene expression data NOTE: Differential expression data is only available for mm10 currently For mouse embryonic biosamples, differential gene expression data is available with the differentialExpression field. Querying GWAS and SNP data NOTE: GWAS data is only available for GRCh38 In order to query GWAS studies, their defined LD Blocks, and their SNPs, you can use the gwas field. You can also query SNPs by genome, accession, or location with the snps field. Query RAMPAGE data You can query RAMPAGE data for a particular gene with the rampage field. Find genomic elements in a given range If you have a given range in the genome and want to find intersecting elements, you can use the range field.","title":"Overview"},{"location":"queries/overview/#retrieving-metadata","text":"In many queries, specific names for biosamples, cell compartments, transcription factors, etc. are required/optional for input. So, it's important to be able to get a list of these. The globals field allows querying metadata.","title":"Retrieving metadata"},{"location":"queries/overview/#searching-for-ccres","text":"In order to search for ccREs, you can use the ccres field. cCREs can be searched by a set of accession, a range, or by their epigenetic signals. This is useful to find basic information about a lot of cCREs, such as their location, their biosample-agnostic epigenetic signals, or their epigenetic signals in a single or few cell types. However, due to performance limitations, it is not a good choice to get detailed information (such as epigenetics signals in every cell type). For this reason, this data is unavailable when querying more than 5 cCREs at a time. If you do want this data for individual cCREs, see the next section.","title":"Searching for cCREs"},{"location":"queries/overview/#getting-details-for-a-single-ccre","text":"To get detailed information on a single cCRE, such as their epigenetic signals in all cell types, or their intersection with transcription factors, you can use the ccre field.","title":"Getting details for a single cCRE"},{"location":"queries/overview/#querying-gene-expression-data","text":"The SCREEN API has imported all ENCODE RNA-seq data. With the geneExpression field, you can query the expression of a single gene across all biosamples.","title":"Querying gene expression data"},{"location":"queries/overview/#querying-differential-gene-expression-data","text":"NOTE: Differential expression data is only available for mm10 currently For mouse embryonic biosamples, differential gene expression data is available with the differentialExpression field.","title":"Querying differential gene expression data"},{"location":"queries/overview/#querying-gwas-and-snp-data","text":"NOTE: GWAS data is only available for GRCh38 In order to query GWAS studies, their defined LD Blocks, and their SNPs, you can use the gwas field. You can also query SNPs by genome, accession, or location with the snps field.","title":"Querying GWAS and SNP data"},{"location":"queries/overview/#query-rampage-data","text":"You can query RAMPAGE data for a particular gene with the rampage field.","title":"Query RAMPAGE data"},{"location":"queries/overview/#find-genomic-elements-in-a-given-range","text":"If you have a given range in the genome and want to find intersecting elements, you can use the range field.","title":"Find genomic elements in a given range"},{"location":"queries/rampage/","text":"Get RAMPAGE data Get RAMPAGE data for a given gene Returns RAMPAGE data for the TIGAR gene. query { rampage(assembly: GRCh38, gene: \"TIGAR\") { transcripts { transcript range { chrom start end } geneinfo items { expid biosample_term_name tissue strand counts } } } } or query { gene(assembly: GRCh38, gene: \"TIGAR\") { rampage { transcripts { transcript range { chrom start end } geneinfo items { expid biosample_term_name tissue strand counts } } } } } Try it out What query would you use to get RAMPAGE data for the nearby protein-coding genes of EH38E1516972 ? See answer query { ccre(accession: \"EH38E1516972\") { nearbygenes { pc { gene { rampage { transcripts { transcript range { chrom start end } geneinfo items { expid biosample_term_name tissue strand counts } } } } } } } }","title":"Rampage"},{"location":"queries/rampage/#get-rampage-data","text":"","title":"Get RAMPAGE data"},{"location":"queries/rampage/#get-rampage-data-for-a-given-gene","text":"Returns RAMPAGE data for the TIGAR gene. query { rampage(assembly: GRCh38, gene: \"TIGAR\") { transcripts { transcript range { chrom start end } geneinfo items { expid biosample_term_name tissue strand counts } } } } or query { gene(assembly: GRCh38, gene: \"TIGAR\") { rampage { transcripts { transcript range { chrom start end } geneinfo items { expid biosample_term_name tissue strand counts } } } } }","title":"Get RAMPAGE data for a given gene"},{"location":"queries/rampage/#try-it-out","text":"What query would you use to get RAMPAGE data for the nearby protein-coding genes of EH38E1516972 ? See answer query { ccre(accession: \"EH38E1516972\") { nearbygenes { pc { gene { rampage { transcripts { transcript range { chrom start end } geneinfo items { expid biosample_term_name tissue strand counts } } } } } } } }","title":"Try it out"},{"location":"queries/range/","text":"Get data by genomic location Expand any returned ChromRange from center or edge Ranges can be expanded from their center or edges. This can be used to query other data from the new range. query { range( assembly: GRCh38 range: { chrom: \"chr2\", start: 115500000, end: 116000000 } ) { chrom start end expandFromCenter(distance: 50) { chrom start end } expandFromEdges(distance: 50) { chrom start end } } } Get genomic elements in a given range Given a range, you can search for multiple types of data. query { range( assembly: GRCh38 range: { chrom: \"chr2\", start: 115500000, end: 116000000 } ) { chrom start end ccres { accession } snps { id } genes { approved_symbol } } }","title":"Genomic elements by location"},{"location":"queries/range/#get-data-by-genomic-location","text":"","title":"Get data by genomic location"},{"location":"queries/range/#expand-any-returned-chromrange-from-center-or-edge","text":"Ranges can be expanded from their center or edges. This can be used to query other data from the new range. query { range( assembly: GRCh38 range: { chrom: \"chr2\", start: 115500000, end: 116000000 } ) { chrom start end expandFromCenter(distance: 50) { chrom start end } expandFromEdges(distance: 50) { chrom start end } } }","title":"Expand any returned ChromRange from center or edge"},{"location":"queries/range/#get-genomic-elements-in-a-given-range","text":"Given a range, you can search for multiple types of data. query { range( assembly: GRCh38 range: { chrom: \"chr2\", start: 115500000, end: 116000000 } ) { chrom start end ccres { accession } snps { id } genes { approved_symbol } } }","title":"Get genomic elements in a given range"}]}